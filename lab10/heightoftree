#include <stdio.h>
#include <stdlib.h>

// Structure for tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find height of the tree
int findHeight(struct Node* root) {
    // Base case: empty tree has height -1
    if (root == NULL) {
        return -1;
    }
    
    // Recursively find height of left and right subtrees
    int leftHeight = findHeight(root->left);
    int rightHeight = findHeight(root->right);
    
    // Return the maximum height plus 1 (for current node)
    return (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;
}

int main() {
    // Create a sample tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->left->left->left = createNode(7);
    
    /*
    The tree structure:
           1
         /   \
        2     3
       / \   /
      4   5 6
     /
    7
    */
    
    int height = findHeight(root);
    printf("Height of the tree is: %d\n", height);
    
    return 0;
}